{"ast":null,"code":"var _jsxFileName = \"/Users/jerlynodonnell/Documents/prosWordle/prostate-cancer-wordle-simple/src/WordleGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { AlertCircle, Info } from 'lucide-react';\nimport './WordleGame.css';\n\n// List of words related to prostate cancer\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WORDS = [\"MHSPC\", \"READY\", \"BRAND\", \"BAYER\", \"QUANT\", \"CHEMO\", \"TUMOR\", \"STOCK\", \"PRINT\", \"COLOR\", \"TRIAL\"];\n\n// Hints for each word\nconst HINTS = {\n  \"MHSPC\": \"Abbreviation for metastatic hormone-sensitive prostate cancer\",\n  \"READY\": \"Prepared or available for treatment\",\n  \"BRAND\": \"A type of product manufactured by a particular company\",\n  \"BAYER\": \"A pharmaceutical company that develops cancer treatments\",\n  \"QUANT\": \"Quantitative analysis often used in cancer research\",\n  \"CHEMO\": \"A type of cancer treatment using drugs to kill cancer cells\",\n  \"TUMOR\": \"An abnormal growth of tissue that can be malignant\",\n  \"STOCK\": \"Shares in the ownership of a company\",\n  \"PRINT\": \"To produce text or images on paper\",\n  \"COLOR\": \"A property of objects related to light reflection\",\n  \"TRIAL\": \"A clinical research study to evaluate medical treatments\"\n};\n\n// Game states\nconst GameState = {\n  PLAYING: 'playing',\n  WON: 'won',\n  LOST: 'lost'\n};\n\n// Letter states\nconst LetterState = {\n  CORRECT: 'correct',\n  PRESENT: 'present',\n  ABSENT: 'absent',\n  UNKNOWN: 'unknown'\n};\nconst WordleGame = () => {\n  _s();\n  const [secretWord, setSecretWord] = useState('');\n  const [guesses, setGuesses] = useState(Array(6).fill(''));\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [currentRow, setCurrentRow] = useState(0);\n  const [gameState, setGameState] = useState(GameState.PLAYING);\n  const [keyboardStatus, setKeyboardStatus] = useState({});\n  const [showHint, setShowHint] = useState(false);\n  const [usedHint, setUsedHint] = useState(false);\n  const [message, setMessage] = useState('');\n  const [showMessage, setShowMessage] = useState(false);\n\n  // Initialize game\n  useEffect(() => {\n    startNewGame();\n  }, []);\n  const startNewGame = () => {\n    const randomWord = WORDS[Math.floor(Math.random() * WORDS.length)];\n    setSecretWord(randomWord);\n    setGuesses(Array(6).fill(''));\n    setCurrentGuess('');\n    setCurrentRow(0);\n    setGameState(GameState.PLAYING);\n    setKeyboardStatus({});\n    setShowHint(false);\n    setUsedHint(false);\n    setMessage('');\n    setShowMessage(false);\n  };\n  const displayMessage = (text, duration = 3000) => {\n    setMessage(text);\n    setShowMessage(true);\n    setTimeout(() => {\n      setShowMessage(false);\n    }, duration);\n  };\n  const checkGuess = guess => {\n    const result = Array(guess.length).fill(LetterState.ABSENT);\n    const secretWordArray = secretWord.split('');\n\n    // Check for correct positions\n    for (let i = 0; i < guess.length; i++) {\n      if (guess[i] === secretWordArray[i]) {\n        result[i] = LetterState.CORRECT;\n        secretWordArray[i] = null; // Mark as used\n      }\n    }\n\n    // Check for correct letters in wrong positions\n    for (let i = 0; i < guess.length; i++) {\n      if (result[i] === LetterState.ABSENT) {\n        const index = secretWordArray.indexOf(guess[i]);\n        if (index !== -1) {\n          result[i] = LetterState.PRESENT;\n          secretWordArray[index] = null; // Mark as used\n        }\n      }\n    }\n    return result;\n  };\n  const updateKeyboardStatus = (guess, result) => {\n    const newStatus = {\n      ...keyboardStatus\n    };\n    for (let i = 0; i < guess.length; i++) {\n      const letter = guess[i];\n      const currentStatus = newStatus[letter] || LetterState.UNKNOWN;\n\n      // Only upgrade status, never downgrade\n      if (currentStatus !== LetterState.CORRECT) {\n        if (result[i] === LetterState.CORRECT) {\n          newStatus[letter] = LetterState.CORRECT;\n        } else if (result[i] === LetterState.PRESENT && currentStatus !== LetterState.CORRECT) {\n          newStatus[letter] = LetterState.PRESENT;\n        } else if (result[i] === LetterState.ABSENT && currentStatus === LetterState.UNKNOWN) {\n          newStatus[letter] = LetterState.ABSENT;\n        }\n      }\n    }\n    setKeyboardStatus(newStatus);\n  };\n  const handleKeyPress = useCallback(event => {\n    if (gameState !== GameState.PLAYING) return;\n    const key = event.key.toUpperCase();\n    if (key === 'ENTER') {\n      if (currentGuess.length === secretWord.length) {\n        // Save the current guess\n        const newGuesses = [...guesses];\n        newGuesses[currentRow] = currentGuess;\n        setGuesses(newGuesses);\n\n        // Check the guess\n        const result = checkGuess(currentGuess);\n        updateKeyboardStatus(currentGuess, result);\n\n        // Check for win or loss\n        if (currentGuess === secretWord) {\n          setGameState(GameState.WON);\n          displayMessage('Congratulations! You won!');\n        } else if (currentRow === 5) {\n          setGameState(GameState.LOST);\n          displayMessage(`Game over! The word was ${secretWord}`);\n        } else {\n          setCurrentRow(currentRow + 1);\n          setCurrentGuess('');\n        }\n      } else {\n        displayMessage('Not enough letters');\n      }\n    } else if (key === 'BACKSPACE') {\n      setCurrentGuess(currentGuess.slice(0, -1));\n    } else if (/^[A-Z]$/.test(key) && currentGuess.length < secretWord.length) {\n      setCurrentGuess(currentGuess + key);\n    }\n  }, [currentGuess, currentRow, gameState, guesses, secretWord]);\n\n  // Listen for keyboard events\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyPress);\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [handleKeyPress]);\n  const handleVirtualKeyPress = key => {\n    if (gameState !== GameState.PLAYING) return;\n    if (key === 'ENTER') {\n      if (currentGuess.length === secretWord.length) {\n        // Save the current guess\n        const newGuesses = [...guesses];\n        newGuesses[currentRow] = currentGuess;\n        setGuesses(newGuesses);\n\n        // Check the guess\n        const result = checkGuess(currentGuess);\n        updateKeyboardStatus(currentGuess, result);\n\n        // Check for win or loss\n        if (currentGuess === secretWord) {\n          setGameState(GameState.WON);\n          displayMessage('Congratulations! You won!');\n        } else if (currentRow === 5) {\n          setGameState(GameState.LOST);\n          displayMessage(`Game over! The word was ${secretWord}`);\n        } else {\n          setCurrentRow(currentRow + 1);\n          setCurrentGuess('');\n        }\n      } else {\n        displayMessage('Not enough letters');\n      }\n    } else if (key === 'BACKSPACE') {\n      setCurrentGuess(currentGuess.slice(0, -1));\n    } else if (/^[A-Z]$/.test(key) && currentGuess.length < secretWord.length) {\n      setCurrentGuess(currentGuess + key);\n    }\n  };\n  const getLetterState = (row, col) => {\n    if (row > currentRow || row === currentRow && !guesses[row]) {\n      return LetterState.UNKNOWN;\n    }\n    if (row === currentRow && !guesses[row]) {\n      return LetterState.UNKNOWN;\n    }\n    const guess = row === currentRow && !guesses[row] ? currentGuess.padEnd(secretWord.length, ' ') : guesses[row];\n    if (row < currentRow || guesses[row]) {\n      const result = checkGuess(guess);\n      return result[col];\n    }\n    return LetterState.UNKNOWN;\n  };\n  const renderBoard = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      role: \"grid\",\n      \"aria-label\": \"Wordle game board\",\n      children: Array(6).fill(null).map((_, row) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: Array(5).fill(null).map((_, col) => {\n          const letterState = getLetterState(row, col);\n          const letter = row === currentRow && col < currentGuess.length ? currentGuess[col] : guesses[row] && col < guesses[row].length ? guesses[row][col] : '';\n          let cellClass = 'cell';\n          if (letterState === LetterState.CORRECT) {\n            cellClass += ' correct';\n          } else if (letterState === LetterState.PRESENT) {\n            cellClass += ' present';\n          } else if (letterState === LetterState.ABSENT && letter) {\n            cellClass += ' absent';\n          }\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: cellClass,\n            role: \"cell\",\n            \"aria-label\": letter ? `${letter}, ${letterState}` : 'empty',\n            children: letter\n          }, `cell-${row}-${col}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 17\n          }, this);\n        })\n      }, `row-${row}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this);\n  };\n  const renderKeyboard = () => {\n    const rows = [['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'], ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'], ['ENTER', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', 'BACKSPACE']];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"keyboard\",\n      role: \"group\",\n      \"aria-label\": \"Virtual keyboard\",\n      children: rows.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"keyboard-row\",\n        children: row.map(key => {\n          let keyClass = 'key';\n          if (key === 'ENTER' || key === 'BACKSPACE') {\n            keyClass += ' wide';\n          }\n          if (keyboardStatus[key] === LetterState.CORRECT) {\n            keyClass += ' correct';\n          } else if (keyboardStatus[key] === LetterState.PRESENT) {\n            keyClass += ' present';\n          } else if (keyboardStatus[key] === LetterState.ABSENT) {\n            keyClass += ' absent';\n          }\n          return /*#__PURE__*/_jsxDEV(\"button\", {\n            className: keyClass,\n            onClick: () => handleVirtualKeyPress(key),\n            \"aria-label\": key === 'BACKSPACE' ? 'Delete' : key,\n            children: key === 'BACKSPACE' ? '←' : key\n          }, `key-${key}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 17\n          }, this);\n        })\n      }, `kbrow-${rowIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this);\n  };\n  const toggleHint = () => {\n    if (!usedHint) {\n      setUsedHint(true);\n    }\n    setShowHint(!showHint);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wordle-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"wordle-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Prostate Cancer Awareness Wordle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Guess the prostate cancer-related word in six tries\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wordle-content\",\n      children: [showMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 11\n      }, this), renderBoard(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startNewGame,\n          className: \"button\",\n          \"aria-label\": \"Start new game\",\n          children: \"New Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleHint,\n          className: `button ${usedHint ? 'hint-button' : ''}`,\n          \"aria-label\": showHint ? \"Hide hint\" : \"Show hint\",\n          \"aria-expanded\": showHint,\n          children: [/*#__PURE__*/_jsxDEV(Info, {\n            size: 16\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 13\n          }, this), showHint ? \"Hide Hint\" : \"Show Hint\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this), showHint && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hint\",\n        role: \"alert\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [/*#__PURE__*/_jsxDEV(AlertCircle, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 15\n          }, this), \"Hint\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: HINTS[secretWord]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 11\n      }, this), renderKeyboard(), gameState !== GameState.PLAYING && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `game-status ${gameState === GameState.WON ? 'won' : 'lost'}`,\n        children: gameState === GameState.WON ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Congratulations! You guessed the word \", secretWord, \"!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Game over! The word was \", secretWord, \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"instructions\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"How to Play\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Guess the WORDLE in six tries.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Each guess must be a valid 5-letter word related to prostate cancer.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"After each guess, the color of the tiles will change to show how close your guess was to the word.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Green: The letter is in the word and in the correct spot.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Yellow: The letter is in the word but in the wrong spot.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Gray: The letter is not in the word.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Use the hint button if you need help.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"accessibility-note\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"This game is designed to be accessible to all users, including those using screen readers. All game elements have appropriate ARIA labels. The game can be played entirely with a keyboard.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 320,\n    columnNumber: 5\n  }, this);\n};\n_s(WordleGame, \"xBJ1ve73QYLdzNMEkkyCcWSiE0M=\");\n_c = WordleGame;\nexport default WordleGame;\nvar _c;\n$RefreshReg$(_c, \"WordleGame\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","AlertCircle","Info","jsxDEV","_jsxDEV","WORDS","HINTS","GameState","PLAYING","WON","LOST","LetterState","CORRECT","PRESENT","ABSENT","UNKNOWN","WordleGame","_s","secretWord","setSecretWord","guesses","setGuesses","Array","fill","currentGuess","setCurrentGuess","currentRow","setCurrentRow","gameState","setGameState","keyboardStatus","setKeyboardStatus","showHint","setShowHint","usedHint","setUsedHint","message","setMessage","showMessage","setShowMessage","startNewGame","randomWord","Math","floor","random","length","displayMessage","text","duration","setTimeout","checkGuess","guess","result","secretWordArray","split","i","index","indexOf","updateKeyboardStatus","newStatus","letter","currentStatus","handleKeyPress","event","key","toUpperCase","newGuesses","slice","test","window","addEventListener","removeEventListener","handleVirtualKeyPress","getLetterState","row","col","padEnd","renderBoard","className","role","children","map","_","Fragment","letterState","cellClass","fileName","_jsxFileName","lineNumber","columnNumber","renderKeyboard","rows","rowIndex","keyClass","onClick","toggleHint","size","_c","$RefreshReg$"],"sources":["/Users/jerlynodonnell/Documents/prosWordle/prostate-cancer-wordle-simple/src/WordleGame.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { AlertCircle, Info } from 'lucide-react';\nimport './WordleGame.css';\n\n// List of words related to prostate cancer\nconst WORDS = [\n  \"MHSPC\", \"READY\", \"BRAND\", \"BAYER\", \"QUANT\", \n  \"CHEMO\", \"TUMOR\", \"STOCK\", \"PRINT\", \"COLOR\", \"TRIAL\"\n];\n\n// Hints for each word\nconst HINTS = {\n  \"MHSPC\": \"Abbreviation for metastatic hormone-sensitive prostate cancer\",\n  \"READY\": \"Prepared or available for treatment\",\n  \"BRAND\": \"A type of product manufactured by a particular company\",\n  \"BAYER\": \"A pharmaceutical company that develops cancer treatments\",\n  \"QUANT\": \"Quantitative analysis often used in cancer research\",\n  \"CHEMO\": \"A type of cancer treatment using drugs to kill cancer cells\",\n  \"TUMOR\": \"An abnormal growth of tissue that can be malignant\",\n  \"STOCK\": \"Shares in the ownership of a company\",\n  \"PRINT\": \"To produce text or images on paper\",\n  \"COLOR\": \"A property of objects related to light reflection\",\n  \"TRIAL\": \"A clinical research study to evaluate medical treatments\"\n};\n\n// Game states\nconst GameState = {\n  PLAYING: 'playing',\n  WON: 'won',\n  LOST: 'lost'\n};\n\n// Letter states\nconst LetterState = {\n  CORRECT: 'correct',\n  PRESENT: 'present',\n  ABSENT: 'absent',\n  UNKNOWN: 'unknown'\n};\n\nconst WordleGame = () => {\n  const [secretWord, setSecretWord] = useState('');\n  const [guesses, setGuesses] = useState(Array(6).fill(''));\n  const [currentGuess, setCurrentGuess] = useState('');\n  const [currentRow, setCurrentRow] = useState(0);\n  const [gameState, setGameState] = useState(GameState.PLAYING);\n  const [keyboardStatus, setKeyboardStatus] = useState({});\n  const [showHint, setShowHint] = useState(false);\n  const [usedHint, setUsedHint] = useState(false);\n  const [message, setMessage] = useState('');\n  const [showMessage, setShowMessage] = useState(false);\n  \n  // Initialize game\n  useEffect(() => {\n    startNewGame();\n  }, []);\n  \n  const startNewGame = () => {\n    const randomWord = WORDS[Math.floor(Math.random() * WORDS.length)];\n    setSecretWord(randomWord);\n    setGuesses(Array(6).fill(''));\n    setCurrentGuess('');\n    setCurrentRow(0);\n    setGameState(GameState.PLAYING);\n    setKeyboardStatus({});\n    setShowHint(false);\n    setUsedHint(false);\n    setMessage('');\n    setShowMessage(false);\n  };\n  \n  const displayMessage = (text, duration = 3000) => {\n    setMessage(text);\n    setShowMessage(true);\n    setTimeout(() => {\n      setShowMessage(false);\n    }, duration);\n  };\n  \n  const checkGuess = (guess) => {\n    const result = Array(guess.length).fill(LetterState.ABSENT);\n    const secretWordArray = secretWord.split('');\n    \n    // Check for correct positions\n    for (let i = 0; i < guess.length; i++) {\n      if (guess[i] === secretWordArray[i]) {\n        result[i] = LetterState.CORRECT;\n        secretWordArray[i] = null; // Mark as used\n      }\n    }\n    \n    // Check for correct letters in wrong positions\n    for (let i = 0; i < guess.length; i++) {\n      if (result[i] === LetterState.ABSENT) {\n        const index = secretWordArray.indexOf(guess[i]);\n        if (index !== -1) {\n          result[i] = LetterState.PRESENT;\n          secretWordArray[index] = null; // Mark as used\n        }\n      }\n    }\n    \n    return result;\n  };\n  \n  const updateKeyboardStatus = (guess, result) => {\n    const newStatus = { ...keyboardStatus };\n    \n    for (let i = 0; i < guess.length; i++) {\n      const letter = guess[i];\n      const currentStatus = newStatus[letter] || LetterState.UNKNOWN;\n      \n      // Only upgrade status, never downgrade\n      if (currentStatus !== LetterState.CORRECT) {\n        if (result[i] === LetterState.CORRECT) {\n          newStatus[letter] = LetterState.CORRECT;\n        } else if (result[i] === LetterState.PRESENT && currentStatus !== LetterState.CORRECT) {\n          newStatus[letter] = LetterState.PRESENT;\n        } else if (result[i] === LetterState.ABSENT && currentStatus === LetterState.UNKNOWN) {\n          newStatus[letter] = LetterState.ABSENT;\n        }\n      }\n    }\n    \n    setKeyboardStatus(newStatus);\n  };\n  \n  const handleKeyPress = useCallback((event) => {\n    if (gameState !== GameState.PLAYING) return;\n    \n    const key = event.key.toUpperCase();\n    \n    if (key === 'ENTER') {\n      if (currentGuess.length === secretWord.length) {\n        // Save the current guess\n        const newGuesses = [...guesses];\n        newGuesses[currentRow] = currentGuess;\n        setGuesses(newGuesses);\n        \n        // Check the guess\n        const result = checkGuess(currentGuess);\n        updateKeyboardStatus(currentGuess, result);\n        \n        // Check for win or loss\n        if (currentGuess === secretWord) {\n          setGameState(GameState.WON);\n          displayMessage('Congratulations! You won!');\n        } else if (currentRow === 5) {\n          setGameState(GameState.LOST);\n          displayMessage(`Game over! The word was ${secretWord}`);\n        } else {\n          setCurrentRow(currentRow + 1);\n          setCurrentGuess('');\n        }\n      } else {\n        displayMessage('Not enough letters');\n      }\n    } else if (key === 'BACKSPACE') {\n      setCurrentGuess(currentGuess.slice(0, -1));\n    } else if (/^[A-Z]$/.test(key) && currentGuess.length < secretWord.length) {\n      setCurrentGuess(currentGuess + key);\n    }\n  }, [currentGuess, currentRow, gameState, guesses, secretWord]);\n  \n  // Listen for keyboard events\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyPress);\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [handleKeyPress]);\n  \n  const handleVirtualKeyPress = (key) => {\n    if (gameState !== GameState.PLAYING) return;\n    \n    if (key === 'ENTER') {\n      if (currentGuess.length === secretWord.length) {\n        // Save the current guess\n        const newGuesses = [...guesses];\n        newGuesses[currentRow] = currentGuess;\n        setGuesses(newGuesses);\n        \n        // Check the guess\n        const result = checkGuess(currentGuess);\n        updateKeyboardStatus(currentGuess, result);\n        \n        // Check for win or loss\n        if (currentGuess === secretWord) {\n          setGameState(GameState.WON);\n          displayMessage('Congratulations! You won!');\n        } else if (currentRow === 5) {\n          setGameState(GameState.LOST);\n          displayMessage(`Game over! The word was ${secretWord}`);\n        } else {\n          setCurrentRow(currentRow + 1);\n          setCurrentGuess('');\n        }\n      } else {\n        displayMessage('Not enough letters');\n      }\n    } else if (key === 'BACKSPACE') {\n      setCurrentGuess(currentGuess.slice(0, -1));\n    } else if (/^[A-Z]$/.test(key) && currentGuess.length < secretWord.length) {\n      setCurrentGuess(currentGuess + key);\n    }\n  };\n  \n  const getLetterState = (row, col) => {\n    if (row > currentRow || (row === currentRow && !guesses[row])) {\n      return LetterState.UNKNOWN;\n    }\n    \n    if (row === currentRow && !guesses[row]) {\n      return LetterState.UNKNOWN;\n    }\n    \n    const guess = row === currentRow && !guesses[row] \n      ? currentGuess.padEnd(secretWord.length, ' ') \n      : guesses[row];\n    \n    if (row < currentRow || guesses[row]) {\n      const result = checkGuess(guess);\n      return result[col];\n    }\n    \n    return LetterState.UNKNOWN;\n  };\n  \n  const renderBoard = () => {\n    return (\n      <div className=\"board\" role=\"grid\" aria-label=\"Wordle game board\">\n        {Array(6).fill(null).map((_, row) => (\n          <React.Fragment key={`row-${row}`}>\n            {Array(5).fill(null).map((_, col) => {\n              const letterState = getLetterState(row, col);\n              const letter = row === currentRow && col < currentGuess.length \n                ? currentGuess[col] \n                : guesses[row] && col < guesses[row].length \n                  ? guesses[row][col] \n                  : '';\n              \n              let cellClass = 'cell';\n              \n              if (letterState === LetterState.CORRECT) {\n                cellClass += ' correct';\n              } else if (letterState === LetterState.PRESENT) {\n                cellClass += ' present';\n              } else if (letterState === LetterState.ABSENT && letter) {\n                cellClass += ' absent';\n              }\n              \n              return (\n                <div\n                  key={`cell-${row}-${col}`}\n                  className={cellClass}\n                  role=\"cell\"\n                  aria-label={letter ? `${letter}, ${letterState}` : 'empty'}\n                >\n                  {letter}\n                </div>\n              );\n            })}\n          </React.Fragment>\n        ))}\n      </div>\n    );\n  };\n  \n  const renderKeyboard = () => {\n    const rows = [\n      ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'],\n      ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'],\n      ['ENTER', 'Z', 'X', 'C', 'V', 'B', 'N', 'M', 'BACKSPACE']\n    ];\n    \n    return (\n      <div className=\"keyboard\" role=\"group\" aria-label=\"Virtual keyboard\">\n        {rows.map((row, rowIndex) => (\n          <div key={`kbrow-${rowIndex}`} className=\"keyboard-row\">\n            {row.map((key) => {\n              let keyClass = 'key';\n              \n              if (key === 'ENTER' || key === 'BACKSPACE') {\n                keyClass += ' wide';\n              }\n              \n              if (keyboardStatus[key] === LetterState.CORRECT) {\n                keyClass += ' correct';\n              } else if (keyboardStatus[key] === LetterState.PRESENT) {\n                keyClass += ' present';\n              } else if (keyboardStatus[key] === LetterState.ABSENT) {\n                keyClass += ' absent';\n              }\n              \n              return (\n                <button\n                  key={`key-${key}`}\n                  className={keyClass}\n                  onClick={() => handleVirtualKeyPress(key)}\n                  aria-label={key === 'BACKSPACE' ? 'Delete' : key}\n                >\n                  {key === 'BACKSPACE' ? '←' : key}\n                </button>\n              );\n            })}\n          </div>\n        ))}\n      </div>\n    );\n  };\n  \n  const toggleHint = () => {\n    if (!usedHint) {\n      setUsedHint(true);\n    }\n    setShowHint(!showHint);\n  };\n  \n  return (\n    <div className=\"wordle-container\">\n      <header className=\"wordle-header\">\n        <h1>Prostate Cancer Awareness Wordle</h1>\n        <p>Guess the prostate cancer-related word in six tries</p>\n      </header>\n      \n      <div className=\"wordle-content\">\n        {/* Message display */}\n        {showMessage && (\n          <div className=\"message\">\n            {message}\n          </div>\n        )}\n        \n        {/* Game board */}\n        {renderBoard()}\n        \n        {/* Controls */}\n        <div className=\"controls\">\n          <button \n            onClick={startNewGame}\n            className=\"button\"\n            aria-label=\"Start new game\"\n          >\n            New Game\n          </button>\n          \n          <button \n            onClick={toggleHint}\n            className={`button ${usedHint ? 'hint-button' : ''}`}\n            aria-label={showHint ? \"Hide hint\" : \"Show hint\"}\n            aria-expanded={showHint}\n          >\n            <Info size={16} /> \n            {showHint ? \"Hide Hint\" : \"Show Hint\"}\n          </button>\n        </div>\n        \n        {/* Hint display */}\n        {showHint && (\n          <div className=\"hint\" role=\"alert\">\n            <h2>\n              <AlertCircle size={20} />\n              Hint\n            </h2>\n            <p>{HINTS[secretWord]}</p>\n          </div>\n        )}\n        \n        {/* Keyboard */}\n        {renderKeyboard()}\n        \n        {/* Game status */}\n        {gameState !== GameState.PLAYING && (\n          <div className={`game-status ${gameState === GameState.WON ? 'won' : 'lost'}`}>\n            {gameState === GameState.WON ? (\n              <p>Congratulations! You guessed the word {secretWord}!</p>\n            ) : (\n              <p>Game over! The word was {secretWord}.</p>\n            )}\n          </div>\n        )}\n        \n        {/* Instructions */}\n        <div className=\"instructions\">\n          <h2>How to Play</h2>\n          <ul>\n            <li>Guess the WORDLE in six tries.</li>\n            <li>Each guess must be a valid 5-letter word related to prostate cancer.</li>\n            <li>After each guess, the color of the tiles will change to show how close your guess was to the word.</li>\n            <li>Green: The letter is in the word and in the correct spot.</li>\n            <li>Yellow: The letter is in the word but in the wrong spot.</li>\n            <li>Gray: The letter is not in the word.</li>\n            <li>Use the hint button if you need help.</li>\n          </ul>\n        </div>\n        \n        {/* Accessibility notes */}\n        <div className=\"accessibility-note\">\n          <p>This game is designed to be accessible to all users, including those using screen readers. All game elements have appropriate ARIA labels. The game can be played entirely with a keyboard.</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default WordleGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}